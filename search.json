[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Contact info",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Hw0/index.html",
    "href": "posts/Hw0/index.html",
    "title": "Data Visualization of Palmer Penguins",
    "section": "",
    "text": "Data Visualization of Palmer Penguins\nPalmer penguins are fun and we should visualize some of their datas. These are the three different species of Palmer penguins.  image source\nImporting packages and reading penguins datasets.\n\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)  # accessing the csv and set as a panda dataframe\n\nFrom the example in this Github page of Palmer Penguins, it looks very intuitive to plot a scatter plot with flipper length and body mass from the data. We can also make the visualization clear using the ‘hue’ arguement to show different color for each datapoint for each species.\n\nsns.scatterplot(penguins, x = 'Body Mass (g)', y = 'Flipper Length (mm)', hue = 'Species').set(title='Flipper Length and Body Mass relationships in three species of penguins')  # plotting a scatterplot with Body mass and Flipper length with different species of penguins. \nplt.legend(bbox_to_anchor=(1, 1),loc=2)  # setting legends outside of the graph for clarity\nplt.title('Body Mass and Flipper Length Relationships based on different speicies of penguins')  # title for the graph\n\nText(0.5, 1.0, 'Body Mass and Flipper Length Relationships based on different speicies of penguins')"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "posts/Hw1/index.html",
    "href": "posts/Hw1/index.html",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "",
    "text": "import sqlite3\nimport numpy as np\nimport pandas as pd\nfrom plotly import express as px\nimport plotly.io as pio\nfrom scipy import stats\nimport calendar\npio.renderers.default=\"iframe\""
  },
  {
    "objectID": "posts/Hw1/index.html#importing-the-necessary-modules.",
    "href": "posts/Hw1/index.html#importing-the-necessary-modules.",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "",
    "text": "import sqlite3\nimport numpy as np\nimport pandas as pd\nfrom plotly import express as px\nimport plotly.io as pio\nfrom scipy import stats\nimport calendar\npio.renderers.default=\"iframe\""
  },
  {
    "objectID": "posts/Hw1/index.html#creating-a-database",
    "href": "posts/Hw1/index.html#creating-a-database",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "Creating a Database",
    "text": "Creating a Database\nFrom the file temps.csv, station-metadata.csv, fips-10-4-to-iso-country-codes.csv, we can build a database with three such tables. From the class we did a little data wrangling to split the month variable for temps csv, and I am going to do the same.\nI will first work on the temperature table. By using chunksize argument to make temps.csv into managable chunks and use prepare_df function to generate month column based on original “valuex” columns and divide temperature by 100 to get the Celsius for temperature.\n\nconn = sqlite3.connect(\"temps.db\") # create a database in current directory called temps.db\n\n\ndf_iter = pd.read_csv(\"temps.csv\", chunksize = 100000)\ndef prepare_df(df):\n    \"\"\"\n    Using prepare_df to change all the valuex to a month column using stack and setindex function. \n    Finnally change the temperature to celsius degree.\n    \"\"\"\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\n\nfor i, df in enumerate(df_iter):\n    df = prepare_df(df)\n    df.to_sql(\"temperatures\", conn, if_exists = \"replace\" if i == 0 else \"append\", index = False)\n\nThen, using read_csv function to load both csv as tables into the temps.db database.\n\nstations = pd.read_csv(\"station-metadata.csv\")\nstations.to_sql(\"stations\", conn, if_exists = \"replace\", index=False)  # stations.csv to a table in database\ncountries = pd.read_csv(\"fips-10-4-to-iso-country-codes.csv\")\ncountries.to_sql(\"countries\", conn, if_exists = \"replace\", index=False)  # countries.csv to a table in database\n\n279\n\n\nCheck that there are three tables and its columns and close the connection.\n\ncursor = conn.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type = 'table'\")\nprint(cursor.fetchall())\n\n[('temperatures',), ('stations',), ('countries',)]\n\n\n\ncursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table';\")  # use sqlite master to show all the tables and columns in databse\nfor result in cursor.fetchall():\n    print(result[0])\n\nCREATE TABLE \"temperatures\" (\n\"ID\" TEXT,\n  \"Year\" INTEGER,\n  \"Month\" INTEGER,\n  \"Temp\" REAL\n)\nCREATE TABLE \"stations\" (\n\"ID\" TEXT,\n  \"LATITUDE\" REAL,\n  \"LONGITUDE\" REAL,\n  \"STNELEV\" REAL,\n  \"NAME\" TEXT\n)\nCREATE TABLE \"countries\" (\n\"FIPS 10-4\" TEXT,\n  \"ISO 3166\" TEXT,\n  \"Name\" TEXT\n)\n\n\n\nconn.close()"
  },
  {
    "objectID": "posts/Hw1/index.html#write-a-query-function",
    "href": "posts/Hw1/index.html#write-a-query-function",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "2. Write a Query Function",
    "text": "2. Write a Query Function\nImport query_climate_database from climate_database.py which I used sql manipulation to produce panda dataframe needed for this task. Since the first two letters of country id in the station table is coresponding to FIPS 10-4 columns for countries table, we can use JOIN and SUBSTRING function to help us to display the full country name.\n\nfrom climate_database import query_climate_database\nimport inspect\nprint(inspect.getsource(query_climate_database))  # import query function and inspect it\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    conn = sqlite3.connect(db_file)\n    cmd = \\\n        '''SELECT S.NAME , S.LATITUDE, S.LONGITUDE, C.Name, T.Year, T.Month, T.Temp\n        FROM stations S\n        LEFT JOIN temperatures T on S.id = T.id\n        LEFT JOIN countries C on C.[FIPS 10-4]= SUBSTRING(S.id, 1, 2)\n        WHERE C.NAME = {country} AND T.year &gt;= {year_begin} AND T.year &lt;= {year_end} AND T.month = {month}\n        ''' .format(country = repr(country), year_begin = year_begin, year_end = year_end, month = month)\n    result_df = pd.read_sql_query(cmd, conn)\n    conn.close()\n    result_df = result_df.rename(columns={'Name' : 'Country'})\n    return result_df\n\n\n\n\nquery_climate_database(db_file = \"temps.db\",  # test for India\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,  \n                       month = 1)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n23.48\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1981\n1\n24.57\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1982\n1\n24.19\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1983\n1\n23.51\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1984\n1\n24.81\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3147\nDARJEELING\n27.050\n88.270\nIndia\n1983\n1\n5.10\n\n\n3148\nDARJEELING\n27.050\n88.270\nIndia\n1986\n1\n6.90\n\n\n3149\nDARJEELING\n27.050\n88.270\nIndia\n1994\n1\n8.10\n\n\n3150\nDARJEELING\n27.050\n88.270\nIndia\n1995\n1\n5.60\n\n\n3151\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n5.70\n\n\n\n\n3152 rows × 7 columns"
  },
  {
    "objectID": "posts/Hw1/index.html#write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "href": "posts/Hw1/index.html#write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "3. Write a Geographic Scatter Function for Yearly Temperature Increases",
    "text": "3. Write a Geographic Scatter Function for Yearly Temperature Increases\nWith LinearRegression from sklearn, we can get a coeficient of temperature function based on the data.\n\nfrom sklearn.linear_model import LinearRegression\n\ndef coef(data_group):\n    x = data_group[[\"Year\"]]  # 2 brackets because X should be a df\n    y = data_group[\"Temp\"]    # 1 bracket because y should be a series\n    LR = LinearRegression()\n    LR.fit(x, y)\n    return round(LR.coef_[0], 4)  # round it to force decimal \n\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs, **kwargs):\n    #  using query_climate_database to get our temperature dataframe\n    df = query_climate_database(db_file, country, year_begin, year_end, month)\n    #  using a simple for loop to check how many observance made by each unique stations and drop based on min_obs\n    obs = []\n    for station in df['NAME'].unique():\n        obs.append([station, df.isin([station]).sum()['NAME']])\n    obs = pd.DataFrame(obs)\n    df = pd.merge(df, obs, left_on = \"NAME\", right_on = 0).drop(columns = [0])\n    df = df[df[1]&gt;min_obs].drop(columns = [1])\n    #  using coef to take the first coefficient of linear regression for our data and round it to the forth decimal place. \n    Estimated = pd.DataFrame(df.groupby('NAME').apply(coef))\n    #  Then merge it into the original dataframe\n    df = pd.merge(df, Estimated, on = 'NAME')\n    df = df.rename({0 : 'Estimated Yearly Increase (°C)'}, axis=1)\n    #  draw the graph, using calendar.month_name to convert month number to month name. \n    title = f'Estimate of yearly increase in temperatures in {calendar.month_name[month]} for stations in {country}, year {year_begin}-{year_end}'\n    fig = px.scatter_mapbox(df,\n                        lat = \"LATITUDE\",\n                        lon = \"LONGITUDE\",\n                        hover_name = \"NAME\",\n                        color = \"Estimated Yearly Increase (°C)\",\n                        title = title,\n                        **kwargs)\n    return fig\n\n\ncolor_map = px.colors.diverging.RdGy_r\nfig = temperature_coefficient_plot(\"temps.db\", \"India\", 1980, 2020, 1,  # this is the test graph provided in the assignment\n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\nfig.show()\n\n\n\n\n\ncolor_map = px.colors.diverging.RdGy_r\nfig = temperature_coefficient_plot(\"temps.db\", \"United Kingdom\", 1980, 2020, 1,  # this is the test graph provided in the assignment\n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\nfig.show()"
  },
  {
    "objectID": "posts/Hw1/index.html#create-two-more-interesting-figures",
    "href": "posts/Hw1/index.html#create-two-more-interesting-figures",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "4. Create Two More Interesting Figures",
    "text": "4. Create Two More Interesting Figures\n\n(a) Writing one more query functon\nThis is a more convenient query function to help us fetch dataframe from the database with inclusion of month_begin and month_end without limiting to a single month like the previous function.\n\nfrom climate_database import query\nimport inspect\nprint(inspect.getsource(query))\n\ndef query(db_file, country, year_begin, year_end, month_begin, month_end):\n    conn = sqlite3.connect(db_file)\n    cmd = \\\n        '''SELECT S.NAME , S.LATITUDE, S.LONGITUDE, C.Name, T.Year, T.Month, T.Temp\n        FROM stations S\n        LEFT JOIN temperatures T on S.id = T.id\n        LEFT JOIN countries C on C.[ISO 3166]= SUBSTRING(S.id, 1, 2)\n        WHERE C.NAME = {country} AND T.year &gt;= {year_begin} AND T.year &lt;= {year_end} AND T.month &gt;= {month_begin} AND T.month &lt;= {month_end}\n        ''' .format(country = repr(country), year_begin = year_begin, year_end = year_end, month_begin = month_begin, month_end = month_end)\n    result_df = pd.read_sql_query(cmd, conn)\n    conn.close()\n    return result_df\n\n\n\n\nquery(db_file = \"temps.db\", \n                country = \"India\",     \n                year_begin = 1980, \n                year_end = 2020,\n                month_begin = 1,\n                month_end = 12)\n\n\n\n\n\n\n\n\nYear\nMonth\nTemp\n\n\n\n\n0\n1980\n1\n19.922593\n\n\n1\n1980\n2\n22.564359\n\n\n2\n1980\n3\n25.464051\n\n\n3\n1980\n4\n29.166232\n\n\n4\n1980\n5\n30.766154\n\n\n...\n...\n...\n...\n\n\n487\n2020\n8\n27.921163\n\n\n488\n2020\n9\n28.163140\n\n\n489\n2020\n10\n27.080230\n\n\n490\n2020\n11\n23.241744\n\n\n491\n2020\n12\n20.508721\n\n\n\n\n492 rows × 3 columns\n\n\n\n\n\n(b) Creating the Figures\nThis is a plot of average temperature in a country for multiple years for different months with px.bar function.\n\ndef temp_in_a_year(db_file, country, year1, year2, month_begin, month_end, **kwargs):\n    \"\"\"\n    With our query function we can get any countries year month data from the database. \n    Using year as facet col to show multipe year's plot in one graph\n    \"\"\"\n    df = query(db_file, country, year1, year2, month_begin, month_end)\n    title = f'Average temperature from {calendar.month_name[month_begin]} to {calendar.month_name[month_end]} for stations in {country}, year {year1} to {year2}'\n    new_df = pd.DataFrame(df.groupby(['Year', 'Month'])['Temp'].apply(np.average)).reset_index()\n    fig = px.bar(new_df, x=\"Month\", y =\"Temp\", title = title, facet_col = \"Year\", facet_col_wrap=4, **kwargs)\n    return fig\n\n\nfig = temp_in_a_year(\"temps.db\", \"India\", 2002, 2012, 1, 12)\nfig.show()\n\n\n\n\n\nfig = temp_in_a_year(\"temps.db\", \"United States\", 1999, 2002, 1, 12)\nfig.show()\n\n\n\n\nWe can also show a graph of temperature of same month over the years for a specific country with px.line figures which is more suited for over the year changes.\n\ndef temp_in_a_month(db_file, country, year_begin, year_end, month, **kwargs):\n    \"\"\"\n    Using query function to take a single months data for multiple years\n    Using px.line to graph this\n    \"\"\"\n    df = query(db_file, country, year_begin, year_end, month, month)\n    title = f'Average temperature in {calendar.month_name[month]} for stations in {country}, year {year_begin} to {year_end}'\n    new_df = pd.DataFrame(df.groupby('Year')['Temp'].apply(np.average))\n    fig = px.line(new_df, title = title, **kwargs)\n    return fig\n\n\nfig = temp_in_a_month(\"temps.db\", \"India\", 1999, 2010, 12)\nfig.show()\n\n\n\n\n\nfig = temp_in_a_month(\"temps.db\", \"United States\", 1980, 2010, 12)\nfig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures\n\n\n\n\n\n\nhw1\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nXipeng Du\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualization of Palmer Penguins\n\n\n\n\n\n\nhw0\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 15, 2024\n\n\nXipeng Du\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 6, 2024\n\n\nXipeng\n\n\n\n\n\n\nNo matching items"
  }
]