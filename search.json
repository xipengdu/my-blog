[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Contact info",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Hw0/index.html",
    "href": "posts/Hw0/index.html",
    "title": "Data Visualization of Palmer Penguins",
    "section": "",
    "text": "Data Visualization of Palmer Penguins\nPalmer penguins are fun and we should visualize some of their datas. These are the three different species of Palmer penguins.  image source\nImporting packages and reading penguins datasets.\n\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)  # accessing the csv and set as a panda dataframe\n\nFrom the example in this Github page of Palmer Penguins, it looks very intuitive to plot a scatter plot with flipper length and body mass from the data. We can also make the visualization clear using the ‘hue’ arguement to show different color for each datapoint for each species.\n\nsns.scatterplot(penguins, x = 'Body Mass (g)', y = 'Flipper Length (mm)', hue = 'Species').set(title='Flipper Length and Body Mass relationships in three species of penguins')  # plotting a scatterplot with Body mass and Flipper length with different species of penguins. \nplt.legend(bbox_to_anchor=(1, 1),loc=2)  # setting legends outside of the graph for clarity\nplt.title('Body Mass and Flipper Length Relationships based on different speicies of penguins')  # title for the graph\n\nText(0.5, 1.0, 'Body Mass and Flipper Length Relationships based on different speicies of penguins')"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "posts/Hw2/index.html",
    "href": "posts/Hw2/index.html",
    "title": "Web Scraping with Scrapy on TMDB",
    "section": "",
    "text": "In this blog post, I’m going to make a super cool web scraper that scrapes your favorite movie in the TMDB.  Here’s a link to my project repository."
  },
  {
    "objectID": "posts/Hw2/index.html#setups-with-terminal-command",
    "href": "posts/Hw2/index.html#setups-with-terminal-command",
    "title": "Web Scraping with Scrapy on TMDB",
    "section": "1. Setups with Terminal Command",
    "text": "1. Setups with Terminal Command\nHere’s how we set up the project. Assuming that you already got scrapy, first, we want to set up a scrapy project using terminal commands. Go to the folder that you want to create the project.\nconda activate PIC16B-24W \nscrapy startproject TMDB_scraper \ncd TMDB_scraper\nWe will see that scrapy.cfg is in this folder, this is where we want to run the other terminal commands. Then, let’s create a py file named tmdb_spider.ipynb in \\TMDB_scraper\\spiders which is all the spider files are located. Add the following lines to the file:\n# to run \n# scrapy crawl tmdb_spider -o movies.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone\n\nimport scrapy\n\nclass TmdbSpider(scrapy.Spider):\n    name = 'tmdb_spider'\n    def __init__(self, subdir=None, *args, **kwargs):\n        self.start_urls = [f\"https://www.themoviedb.org/movie/{subdir}/\"]"
  },
  {
    "objectID": "posts/Hw2/index.html#setup-the-spider-file",
    "href": "posts/Hw2/index.html#setup-the-spider-file",
    "title": "Web Scraping with Scrapy on TMDB",
    "section": "2. Setup the spider file",
    "text": "2. Setup the spider file\nLet’s go through different parse functions that I used to consctruct this spider.\ndef parse(self, response): \n    # add /cast to the url and use parse_full_credits\n    current_url = response.urljoin(f'{response.url}/cast') \n    yield scrapy.Request(current_url, callback=self.parse_full_credits)\nThis is the parse() implementation in our spider class. This will be the first function that will be ran when we call this spider in the terminal. This works very similar to scrapy.request(start_url, self.parse) which return us a response object to play with. Use urljoin to add /cast at the end to take us to the full cast list for your favorite movies. Then, we go to the next function parse_full_credits.\ndef parse_full_credits(self, response):\n        # use xpath to take different actors' name and information and put them in a dictionary\n        self.actors = {\"actor\": response.xpath(\"//div[@class='info']/p/a/text()\").getall(), \n                         \"web\": response.xpath(\"//div[@class='info']/p/a/@href\").getall()}\n        for i in range(len(self.actors[\"actor\"])):\n            yield scrapy.Request(\"https://www.themoviedb.org\" + self.actors[\"web\"][i] + \"?credit_department=Acting\"\n                                 , callback=self.parse_actor_page)\nTo write this method, I used xpath to take different actors’ name using text(), and their corresponding link with @href from the same element which is from the div[@class ='info']/p/a. We also use string manipulation to go to the actor page with the specific credit category for acting, because we dont want to see a movie that our favorite actors are only crew for the movie. We can set up a loop for each actor in our favorite movie then call our next function parse_actor_page.\ndef parse_actor_page(self, response):\n        actor_name = response.xpath(\"//h2[@class='title']/a/text()\").get()\n        movie_or_TV_name_list = response.xpath(\"//a[@class='tooltip']/bdi/text()\").getall()\n        for movie_or_TV_name in movie_or_TV_name_list:\n            yield {\"actor\" : actor_name, \"movie_or_TV_name\" : movie_or_TV_name}\nFinally, for parse_actor_page we want to yield a single dictionary with certain actors for each movies or TV they work in, which we get by associating xpath a[@class='tooltip']/bdi’s text in the html elements and loop through all the movie or TV names."
  },
  {
    "objectID": "posts/Hw2/index.html#making-recommandations",
    "href": "posts/Hw2/index.html#making-recommandations",
    "title": "Web Scraping with Scrapy on TMDB",
    "section": "3. Making Recommandations",
    "text": "3. Making Recommandations\nSince my professor’s favorite movie is Harry Potter and the Philosopher’s stone. Let’s run the spider with scrapy crawl tmdb_spider -o movies.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone, and getting results.csv file with columns for actor names and the movies and TV shows on which they featured in.\n\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"iframe\"\ndf = pd.read_csv('results.csv')\ndf\n\n\n\n\n\n\n\n\nactor\nmovie_or_TV_name\n\n\n\n\n0\nDaniel Radcliffe\nHave I Got a Bit More News for You\n\n\n1\nDaniel Radcliffe\nDavid Holmes: The Boy Who Lived\n\n\n2\nDaniel Radcliffe\n100 Years of Warner Bros.\n\n\n3\nDaniel Radcliffe\nMulligan\n\n\n4\nDaniel Radcliffe\nDigman!\n\n\n...\n...\n...\n\n\n2952\nRupert Grint\nThe View\n\n\n2953\nRupert Grint\nGMTV\n\n\n2954\nRupert Grint\nThe Tonight Show with Jay Leno\n\n\n2955\nRupert Grint\nAn Audience with...\n\n\n2956\nRupert Grint\nToday\n\n\n\n\n2957 rows × 2 columns\n\n\n\nWe can see that this movie list is populated with our star actor Daniel Radcliffe. Let’s show three movies or TV shows for each actor.\n\nnew_list = pd.DataFrame()\nfor actor in df.actor.unique():\n    new_list = pd.concat([new_list, df[df.actor == actor][0:3]], ignore_index = True)\nnew_list\n\n\n\n\n\n\n\n\nactor\nmovie_or_TV_name\n\n\n\n\n0\nDaniel Radcliffe\nHave I Got a Bit More News for You\n\n\n1\nDaniel Radcliffe\nDavid Holmes: The Boy Who Lived\n\n\n2\nDaniel Radcliffe\n100 Years of Warner Bros.\n\n\n3\nJamie Yeates\nCreating the World of Harry Potter\n\n\n4\nJamie Yeates\nHarry Potter and the Chamber of Secrets\n\n\n...\n...\n...\n\n\n176\nEmma Watson\nPickled\n\n\n177\nEmma Watson\nPrada Paradoxe\n\n\n178\nRupert Grint\nEnemy of Man\n\n\n179\nRupert Grint\nDavid Holmes: The Boy Who Lived\n\n\n180\nRupert Grint\nKnock at the Cabin\n\n\n\n\n181 rows × 2 columns\n\n\n\nThis is a small enough list for us to read for our favorite movie!  Now we can also make some pretty plots for this dataframe. For example, these is a bar graph for occurance of movies for all the actors appeared in this movie.\n\npx.bar(df.actor.value_counts(), labels = {'value': \"movies and TV\", 'variable' : 'occurance'}, title=\"Appearance in Movies or Shows for Actors in HP and the Philosopher's stone\")  # using value counts to get occurance of a value in a dataframe column. \n\n\n\n\nSuppose that I only want to see Harry Potter movies, this is also an option to do that.\n\nhpdf = df[df.movie_or_TV_name.str[0:12] == \"Harry Potter\"].reset_index(drop=True)  # using string method for all movie and tv names to get starting phrase with Harry Potter\nhpdf\n\n\n\n\n\n\n\n\nactor\nmovie_or_TV_name\n\n\n\n\n0\nDaniel Radcliffe\nHarry Potter 20th Anniversary: Return to Hogwarts\n\n\n1\nDaniel Radcliffe\nHarry Potter and the Deathly Hallows: Part 2\n\n\n2\nDaniel Radcliffe\nHarry Potter and the Deathly Hallows: Part 1\n\n\n3\nDaniel Radcliffe\nHarry Potter and the Half-Blood Prince\n\n\n4\nDaniel Radcliffe\nHarry Potter and the Order of the Phoenix\n\n\n...\n...\n...\n\n\n242\nRupert Grint\nHarry Potter and the Order of the Phoenix\n\n\n243\nRupert Grint\nHarry Potter and the Goblet of Fire\n\n\n244\nRupert Grint\nHarry Potter and the Prisoner of Azkaban\n\n\n245\nRupert Grint\nHarry Potter and the Chamber of Secrets\n\n\n246\nRupert Grint\nHarry Potter and the Philosopher's Stone\n\n\n\n\n247 rows × 2 columns\n\n\n\nI am also interested that how many of the actors act through the entire HP movies, and how many actors only acted a few times, and I also included Harry Potter 20th Anniversary.\n\nprint(hpdf.actor.value_counts())  # use the same trick to get appearance counts\npx.bar(hpdf.actor.value_counts(), labels = {'variable': 'occurance', 'value': \"movies\"},title=\"Appearance in Each Harry Potter Movies or Shows for Actors\")\n\nactor\nTom Felton           10\nMatthew Lewis        10\nDaniel Radcliffe      9\nBonnie Wright         9\nEmma Watson           9\n                     ..\nSaunders Triplets     1\nJean Southern         1\nKieri Kennedy         1\nLeila Hoffman         1\nElizabeth Spriggs     1\nName: count, Length: 63, dtype: int64\n\n\n\n\n\nThis data only contains the actors that appeared in the first film which is a bummer. It is also very interesting that Tom Felton and Mathew Lewis appears more times than Daniel Radcliffe who is the protagonist of the series!"
  },
  {
    "objectID": "posts/Hw3/index.html",
    "href": "posts/Hw3/index.html",
    "title": "Web Development with Flask - A Simple Implementation of Online Message Bank",
    "section": "",
    "text": "In this blog post, I’m going to make a super cool simple online message bank that you can develop yourself with flask. Here’s a link to my project repository which is built upon this example."
  },
  {
    "objectID": "posts/Hw3/index.html#setups-with-terminal-command",
    "href": "posts/Hw3/index.html#setups-with-terminal-command",
    "title": "Web Development with Flask - A Simple Implementation of Online Message Bank",
    "section": "1. Setups with Terminal Command",
    "text": "1. Setups with Terminal Command\nAfter cloning the repository, you can run this page on your local machine with flask run."
  },
  {
    "objectID": "posts/Hw3/index.html#explaining-functions-in-app.py",
    "href": "posts/Hw3/index.html#explaining-functions-in-app.py",
    "title": "Web Development with Flask - A Simple Implementation of Online Message Bank",
    "section": "2. Explaining Functions in app.py",
    "text": "2. Explaining Functions in app.py\n\n(1) get_message_db()\ndef get_message_db():\n  # Use create table if not exists to create a message_db with handle and message for text. \n  try:\n      return g.message_db\n  except:\n      g.message_db = sqlite3.connect(\"messages_db.sqlite\")\n      cmd = 'CREATE TABLE IF NOT EXISTS messages_table (handle TEXT, message TEXT)' \n      cursor = g.message_db.cursor()\n      cursor.execute(cmd)\n      return g.message_db\nThis is the first function we use to check and create a table called messages_table in our database file. With the sql command CREATE TABLE IF NOT EXISTS table (column1, column2), we can create a table in our database if it doesn’t exists. This table includes two text columns with handle and message.\n\n\n(2) basic route defintions\n@app.route('/')\ndef main():\n    return render_template('hello.html')\n\n@app.route('/hello')\ndef hello():\n    return render_template('hello.html')\nmain() and hello() are the most basic functions that call render_template with our html files that we have written.\n\n\n(3) insert_message(request)\ndef insert_message(request):\n    \"\"\"\n    use sql command insert into table .. values .. to insert input into the database. \n    \"\"\"\n    cmd = f'INSERT INTO messages_table (handle, message) VALUES (\"{request.form[\"handle\"]}\", \"{request.form[\"message\"]}\")'\n    cursor = g.message_db.cursor()\n    cursor.execute(cmd)\n    g.message_db.commit()\n    pass\nThis function is used to insert values into our table in the database. The values from the website will form a request object that can be used as input of this function. Then, we can use sql command INSERT INTO table (column) VALUES (value) to insert both handle and message into two corresponding columns in the table.\n\n\n(4) submit()\n@app.route('/submit', methods=['POST', 'GET'])\ndef submit():\n    get_message_db()\n    if request.method == 'GET':\n        return render_template('submit.html')     \n    else:\n        # split successful and error case for inputs. \n        insert_message(request)\n        try: \n            insert_message(request)\n            return render_template('submit.html', thanks = True, handle = request.form['handle'])\n        except:\n            return render_template('submit.html', error = True)\nWith method 'POST' and 'GET', we can split two version of returned webpage. Then, after successfully running insert(request) for this page, we can render template with thanks or error.\n\n\n(5) random_message(n)\ndef random_messages(n): \n    # fetch n elements from the table with random() \n    cmd = f'SELECT * FROM messages_table ORDER BY RANDOM() LIMIT {n};'\n    cursor = get_message_db().cursor()\n    result = cursor.execute(cmd).fetchall()\n    return result\nIn this function, we can fetch n ammounts of random entries in our database’s table with the SELECT * FROM table ORDER BY RANDOM LIMIT n command. Then, this function return a list with two columns and n rows.\n\n\n(6) view()\n@app.route('/view')\ndef view():\n    result = random_messages(5)\n    return render_template('view.html', result = result)\nThis function will call random_messages(5) to return 5 rows of handle and message. Then, we feed this list into view.html as result function, and render it. Then, we will cover how to implement function arguments in the html files."
  },
  {
    "objectID": "posts/Hw3/index.html#explaining-html-template-files",
    "href": "posts/Hw3/index.html#explaining-html-template-files",
    "title": "Web Development with Flask - A Simple Implementation of Online Message Bank",
    "section": "3. Explaining HTML Template Files",
    "text": "3. Explaining HTML Template Files\n{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}View Messages{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;p&gt;\n    Displaying up to five random messages from past submissions! \n    &lt;br&gt;\n    {% for entry in result %} \n    &lt;message&gt;{{entry[1]}} &lt;/message&gt;\n                               - &lt;i&gt;{{entry[0]}}&lt;/i&gt;\n    &lt;br&gt;\n  {% endfor %}\n  &lt;/p&gt;\n{% endblock %}\nThis is the view.html template. With base.html on top of this webpage, &lt;h1&gt; is a type of text format used for header. Then, we use &lt;p&gt; text format for the remainder of the text. Then, we use for loop function in jinja to display each random entries. I have also made a text format called &lt;message&gt; to differentiate message and handle, and I also italized handle with &lt;i&gt;.\n\n4. Implementation of the Website\nWe can input our name and message into the website in the submit page.   \nThen, we can view a bunch of previous messages that is in the database in the view page."
  },
  {
    "objectID": "posts/Hw1/index.html",
    "href": "posts/Hw1/index.html",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "",
    "text": "import sqlite3\nimport numpy as np\nimport pandas as pd\nfrom plotly import express as px\nimport plotly.io as pio\nfrom scipy import stats\nimport calendar\npio.renderers.default=\"iframe\""
  },
  {
    "objectID": "posts/Hw1/index.html#importing-the-necessary-modules.",
    "href": "posts/Hw1/index.html#importing-the-necessary-modules.",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "",
    "text": "import sqlite3\nimport numpy as np\nimport pandas as pd\nfrom plotly import express as px\nimport plotly.io as pio\nfrom scipy import stats\nimport calendar\npio.renderers.default=\"iframe\""
  },
  {
    "objectID": "posts/Hw1/index.html#creating-a-database",
    "href": "posts/Hw1/index.html#creating-a-database",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "Creating a Database",
    "text": "Creating a Database\nFrom the file temps.csv, station-metadata.csv, fips-10-4-to-iso-country-codes.csv, we can build a database with three such tables. From the class we did a little data wrangling to split the month variable for temps csv, and I am going to do the same.\nI will first work on the temperature table. By using chunksize argument to make temps.csv into managable chunks and use prepare_df function to generate month column based on original “valuex” columns and divide temperature by 100 to get the Celsius for temperature.\n\nconn = sqlite3.connect(\"temps.db\") # create a database in current directory called temps.db\n\n\ndf_iter = pd.read_csv(\"temps.csv\", chunksize = 100000)\ndef prepare_df(df):\n    \"\"\"\n    Using prepare_df to change all the valuex to a month column using stack and setindex function. \n    Finnally change the temperature to celsius degree.\n    \"\"\"\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\n\nfor i, df in enumerate(df_iter):\n    df = prepare_df(df)\n    df.to_sql(\"temperatures\", conn, if_exists = \"replace\" if i == 0 else \"append\", index = False)\n\nThen, using read_csv function to load both csv as tables into the temps.db database.\n\nstations = pd.read_csv(\"station-metadata.csv\")\nstations.to_sql(\"stations\", conn, if_exists = \"replace\", index=False)  # stations.csv to a table in database\ncountries = pd.read_csv(\"fips-10-4-to-iso-country-codes.csv\")\ncountries.to_sql(\"countries\", conn, if_exists = \"replace\", index=False)  # countries.csv to a table in database\n\n279\n\n\nCheck that there are three tables and its columns and close the connection.\n\ncursor = conn.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type = 'table'\")\nprint(cursor.fetchall())\n\n[('temperatures',), ('stations',), ('countries',)]\n\n\n\ncursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table';\")  # use sqlite master to show all the tables and columns in databse\nfor result in cursor.fetchall():\n    print(result[0])\n\nCREATE TABLE \"temperatures\" (\n\"ID\" TEXT,\n  \"Year\" INTEGER,\n  \"Month\" INTEGER,\n  \"Temp\" REAL\n)\nCREATE TABLE \"stations\" (\n\"ID\" TEXT,\n  \"LATITUDE\" REAL,\n  \"LONGITUDE\" REAL,\n  \"STNELEV\" REAL,\n  \"NAME\" TEXT\n)\nCREATE TABLE \"countries\" (\n\"FIPS 10-4\" TEXT,\n  \"ISO 3166\" TEXT,\n  \"Name\" TEXT\n)\n\n\n\nconn.close()"
  },
  {
    "objectID": "posts/Hw1/index.html#write-a-query-function",
    "href": "posts/Hw1/index.html#write-a-query-function",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "2. Write a Query Function",
    "text": "2. Write a Query Function\nImport query_climate_database from climate_database.py which I used sql manipulation to produce panda dataframe needed for this task. Since the first two letters of country id in the station table is coresponding to FIPS 10-4 columns for countries table, we can use JOIN and SUBSTRING function to help us to display the full country name.\n\nfrom climate_database import query_climate_database\nimport inspect\nprint(inspect.getsource(query_climate_database))  # import query function and inspect it\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    \"\"\"\n    This is a function that uses database file and corresponding criteria to filter out \n    and output a dataframe with corresponding requirements using sql query\n    \"\"\"\n    conn = sqlite3.connect(db_file)\n    cmd = \\\n        '''SELECT S.NAME , S.LATITUDE, S.LONGITUDE, C.Name, T.Year, T.Month, T.Temp\n        FROM stations S\n        LEFT JOIN temperatures T on S.id = T.id\n        LEFT JOIN countries C on C.[FIPS 10-4]= SUBSTRING(S.id, 1, 2)\n        WHERE C.NAME = {country} AND T.year &gt;= {year_begin} AND T.year &lt;= {year_end} AND T.month = {month}\n        ''' .format(country = repr(country), year_begin = year_begin, year_end = year_end, month = month)\n    result_df = pd.read_sql_query(cmd, conn)\n    conn.close()\n    result_df = result_df.rename(columns={'Name' : 'Country'})\n    return result_df\n\n\n\n\nquery_climate_database(db_file = \"temps.db\",  # test for India\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,  \n                       month = 1)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n23.48\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1981\n1\n24.57\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1982\n1\n24.19\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1983\n1\n23.51\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1984\n1\n24.81\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3147\nDARJEELING\n27.050\n88.270\nIndia\n1983\n1\n5.10\n\n\n3148\nDARJEELING\n27.050\n88.270\nIndia\n1986\n1\n6.90\n\n\n3149\nDARJEELING\n27.050\n88.270\nIndia\n1994\n1\n8.10\n\n\n3150\nDARJEELING\n27.050\n88.270\nIndia\n1995\n1\n5.60\n\n\n3151\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n5.70\n\n\n\n\n3152 rows × 7 columns"
  },
  {
    "objectID": "posts/Hw1/index.html#write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "href": "posts/Hw1/index.html#write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "3. Write a Geographic Scatter Function for Yearly Temperature Increases",
    "text": "3. Write a Geographic Scatter Function for Yearly Temperature Increases\nWith LinearRegression from sklearn, we can get a coeficient of temperature function based on the data.\n\nfrom sklearn.linear_model import LinearRegression\n\ndef coef(data_group):\n    \"\"\"\n    This is a function that intake a datagroup with year and temp to output its linear regression's coefficient alpha. \n    \"\"\"\n    x = data_group[[\"Year\"]]  # 2 brackets because X should be a df\n    y = data_group[\"Temp\"]    # 1 bracket because y should be a series\n    LR = LinearRegression()\n    LR.fit(x, y)\n    return round(LR.coef_[0], 4)  # round it to force decimal \n\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs, **kwargs):\n    \"\"\"\n    This is a function that take database and its corresponding requirements to output a temperature increase coefficient plot on Geo mapbox. \n    \"\"\"\n    #  using query_climate_database to get our temperature dataframe\n    df = query_climate_database(db_file, country, year_begin, year_end, month)\n    #  using a simple for loop to check how many observance made by each unique stations and drop based on min_obs\n    obs = []\n    for station in df['NAME'].unique():\n        obs.append([station, df.isin([station]).sum()['NAME']])\n    obs = pd.DataFrame(obs)\n    df = pd.merge(df, obs, left_on = \"NAME\", right_on = 0).drop(columns = [0])\n    df = df[df[1]&gt;min_obs].drop(columns = [1])\n    #  using coef to take the first coefficient of linear regression for our data and round it to the forth decimal place. \n    Estimated = pd.DataFrame(df.groupby('NAME').apply(coef))\n    #  Then merge it into the original dataframe\n    df = pd.merge(df, Estimated, on = 'NAME')\n    df = df.rename({0 : 'Estimated Yearly Increase (°C)'}, axis=1)\n    #  draw the graph, using calendar.month_name to convert month number to month name. \n    title = f'Estimate of yearly increase in temperatures in {calendar.month_name[month]} for stations in {country}, year {year_begin}-{year_end}'\n    fig = px.scatter_mapbox(df,\n                        lat = \"LATITUDE\",\n                        lon = \"LONGITUDE\",\n                        hover_name = \"NAME\",\n                        color = \"Estimated Yearly Increase (°C)\",\n                        title = title,\n                        **kwargs)\n    return fig\n\n\ncolor_map = px.colors.diverging.RdGy_r\nfig = temperature_coefficient_plot(\"temps.db\", \"India\", 1980, 2020, 1,  # this is the test graph provided in the assignment\n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\nfig.show()\n\n\n\n\n\ncolor_map = px.colors.diverging.RdGy_r\nfig = temperature_coefficient_plot(\"temps.db\", \"United Kingdom\", 1980, 2020, 1,  # this is the test graph provided in the assignment\n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\nfig.show()"
  },
  {
    "objectID": "posts/Hw1/index.html#create-two-more-interesting-figures",
    "href": "posts/Hw1/index.html#create-two-more-interesting-figures",
    "title": "Building Global Temperature Database and Use Ploty Express to Make Interesting Figures",
    "section": "4. Create Two More Interesting Figures",
    "text": "4. Create Two More Interesting Figures\n\n(a) Writing one more query functon\nThis is a more convenient query function to help us fetch dataframe from the database with inclusion of month_begin and month_end without limiting to a single month like the previous function.\n\nfrom climate_database import query\nimport inspect\nprint(inspect.getsource(query))\n\ndef query(db_file, country, year_begin, year_end, month_begin, month_end):\n    \"\"\"\n    This is a function that uses database file and corresponding criteria to filter out \n    and output a dataframe with corresponding requirements using sql query\n    \"\"\"\n    conn = sqlite3.connect(db_file)\n    cmd = \\\n        '''SELECT S.NAME , S.LATITUDE, S.LONGITUDE, C.Name, T.Year, T.Month, T.Temp\n        FROM stations S\n        LEFT JOIN temperatures T on S.id = T.id\n        LEFT JOIN countries C on C.[ISO 3166]= SUBSTRING(S.id, 1, 2)\n        WHERE C.NAME = {country} AND T.year &gt;= {year_begin} AND T.year &lt;= {year_end} AND T.month &gt;= {month_begin} AND T.month &lt;= {month_end}\n        ''' .format(country = repr(country), year_begin = year_begin, year_end = year_end, month_begin = month_begin, month_end = month_end)\n    result_df = pd.read_sql_query(cmd, conn)\n    conn.close()\n    return result_df\n\n\n\n\nquery(db_file = \"temps.db\", \n                country = \"India\",     \n                year_begin = 1980, \n                year_end = 2020,\n                month_begin = 1,\n                month_end = 12)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nName\nYear\nMonth\nTemp\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n23.48\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n2\n27.16\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n3\n30.07\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n4\n32.39\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n5\n33.04\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n37671\nDARJEELING\n27.050\n88.270\nIndia\n1996\n11\n11.90\n\n\n37672\nDARJEELING\n27.050\n88.270\nIndia\n1996\n12\n8.80\n\n\n37673\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n5.70\n\n\n37674\nDARJEELING\n27.050\n88.270\nIndia\n1997\n2\n4.90\n\n\n37675\nDARJEELING\n27.050\n88.270\nIndia\n1997\n3\n10.70\n\n\n\n\n37676 rows × 7 columns\n\n\n\n\n\n(b) Creating the Figures\nThis is a plot of average temperature in a country for multiple years for different months with px.bar function.\n\ndef temp_in_a_year(db_file, country, year1, year2, month_begin, month_end, **kwargs):\n    \"\"\"\n    With our query function we can get any countries year month data from the database. \n    Using year as facet col to show multipe year's plot in one graph\n    \"\"\"\n    df = query(db_file, country, year1, year2, month_begin, month_end)\n    title = f'Average temperature from {calendar.month_name[month_begin]} to {calendar.month_name[month_end]} for stations in {country}, year {year1} to {year2}'\n    new_df = pd.DataFrame(df.groupby(['Year', 'Month'])['Temp'].apply(np.average)).reset_index()\n    fig = px.bar(new_df, x=\"Month\", y =\"Temp\", title = title, facet_col = \"Year\", facet_col_wrap=4, **kwargs)\n    return fig\n\n\nfig = temp_in_a_year(\"temps.db\", \"India\", 2002, 2012, 1, 12)\nfig.show()\n\n\n\n\n\nfig = temp_in_a_year(\"temps.db\", \"United States\", 1999, 2002, 1, 12)\nfig.show()\n\n\n\n\nWe can also show a graph of temperature of same month over the years for a specific country with px.line figures which is more suited for over the year changes.\n\ndef temp_in_a_month(db_file, country, year_begin, year_end, month, **kwargs):\n    \"\"\"\n    Using query function to take a single months data for multiple years\n    Using px.line to graph this\n    \"\"\"\n    df = query(db_file, country, year_begin, year_end, month, month)\n    title = f'Average temperature in {calendar.month_name[month]} for stations in {country}, year {year_begin} to {year_end}'\n    new_df = pd.DataFrame(df.groupby('Year')['Temp'].apply(np.average))\n    fig = px.line(new_df, title = title, **kwargs)\n    return fig\n\n\nfig = temp_in_a_month(\"temps.db\", \"India\", 1999, 2010, 12)\nfig.show()\n\n\n\n\n\nfig = temp_in_a_month(\"temps.db\", \"United States\", 1980, 2010, 12)\nfig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Web Development with Flask - A Simple Implementation of Online Message Bank\n\n\n\n\n\n\nhw3\n\n\nweb development\n\n\n\n\n\n\n\n\n\nFeb 10, 2024\n\n\nXipeng Du\n\n\n\n\n\n\n\n\n\n\n\n\nWeb Scraping with Scrapy on TMDB\n\n\n\n\n\n\nhw2\n\n\nweb scraping\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nXipeng Du\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding Global Temperature Database and Use Ploty Express to Make Interesting Figures\n\n\n\n\n\n\nhw1\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nXipeng Du\n\n\n\n\n\n\n\n\n\n\n\n\nData Visualization of Palmer Penguins\n\n\n\n\n\n\nhw0\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 15, 2024\n\n\nXipeng Du\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 6, 2024\n\n\nXipeng\n\n\n\n\n\n\nNo matching items"
  }
]